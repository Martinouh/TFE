bah ta classe aura des getters/setters
et une variable membre principale
ton objet ovh
et un booleen
connected
qui gardera en memoire si tu es deja connecté
et chq fois que tu veux faire un appel
tu vas verifier si tu es connecté
si tu es connecté
tu fais juste l'appel
sinon tu te connectes et puis tu fais l'appel
tu auras comme methode:
faireAppel(...)
seConnecter()
isConnected()
seDeconnecter()
...
avec ca c'est deja pas mal


---***  get vps name ip etc  ***----

bah tu fais des fonctions
tte faites
qui englobent tout ca
tu les recuperes des que tu te connectes
et tu les gardes comme variable de ta classe
pcq bon ca va jamais changer
et en plus ils sont ds ta db
tu vas faire une classe qui gere ta db et les appels a l'api
des qu'elle sera faite ca sera nickel


--** bah jvisualise pas trop comme ça **--

class APIcalls()
{
private ovh;
private connected;
APIcalls(username, key)
{
ovh = ...
...
connected = true;
...
}
}
là c'est juste un exemple de constructeur
je sais pas exactement comment tu dois te connecter
ms des que l'objet est construit
ta variable ovh contient les infos de connexion
et tu dois plus jamais te reconnecter
et puis tu fais une deuxieme methode
genre
reinstaller(nomvps)
{
ovh->post(/vps/reinstall);
...
}
une autre methode
reboot(nomvps)
{
ovh->post(vps/reboot/...)
}
une methode par appel par ex
comme ca
ds ton code apres
il te suffit de faire
$ovh = new APIcall('martinouh', '234555435QFGVSETRB');
et puis
$ovh->reinstall('vps_name');
